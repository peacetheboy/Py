# -*- coding: utf-8 -*-
"""Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AqZKq66l-rhOihlgJopJCXOX4NjkzUZ_
"""

import os

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from xgboost import XGBRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint

with open("train.csv", "rb") as f:
    content = f.read()
decoded_content = content.decode('latin1')
from io import StringIO
store_sales = pd.read_csv(StringIO(decoded_content))

store_sales.head(10)

"""Check for null values"""

store_sales.info()

"""Droppong store and item culombs"""

columns_to_keep = ['ORDERDATE', 'SALES']
store_sales = store_sales[columns_to_keep]

store_sales.info()

"""Coverting date from  object to dateTime datatype"""

store_sales['ORDERDATE'] = pd.to_datetime(store_sales['ORDERDATE'])

store_sales.info()

"""Convering date to a month period and the sum the number of items in each month"""

store_sales['ORDERDATE'] = store_sales['ORDERDATE'].dt.to_period("M")
monthly_sale = store_sales.groupby('ORDERDATE').sum().reset_index()

"""convert the resulting date column to timestamp datatype"""

monthly_sale['ORDERDATE'] = monthly_sale['ORDERDATE'].dt.to_timestamp()

store_sales.info()

monthly_sale.head(10)

"""Visualize monthly sales of the items"""

plt.figure(figsize=(15,5))
plt.plot(monthly_sale['ORDERDATE'], monthly_sale['SALES'])
plt.xlabel("ORDERDATE")
plt.xlabel("DALES")
plt.title("Monthly Customer Sales")
plt.show()

"""CALL THE DIFFERENCE ON THE SALES COLUMS TO MAKE THE SALES DATA STATIONARY"""

monthly_sale['sales_diff'] = monthly_sale['SALES'].diff()
monthly_sale = monthly_sale.dropna()
monthly_sale.head(10)

"""average"""

plt.figure(figsize=(15,5))
plt.plot(monthly_sale['ORDERDATE'], monthly_sale['SALES'])
plt.xlabel("ORDERDATE")
plt.xlabel("SALES")
plt.title("Monthly Customer Diffrence")
plt.show()

"""     Dropping of sales and date"""

supervised_data = monthly_sale.drop(['ORDERDATE', 'SALES'], axis=1)

"""     preparing supervised data"""

for i in range(1, 13):
  col_name = 'month_' + str(i)
  supervised_data[col_name] = supervised_data['sales_diff'].shift(i)
supervised_data = supervised_data.dropna().reset_index(drop=True)
supervised_data.head(10)

"""Split data into Train and Test"""

train_data = supervised_data[:-12]
test_data = supervised_data[-12:]
print("Train Data Shape: ", train_data.shape)
print("Test Data Shape: ", test_data.shape)

scaler = MinMaxScaler(feature_range=(-1,1))
scaler.fit(train_data)
train_data = scaler.transform(train_data)
test_data = scaler.transform(test_data)

x_train, y_train = train_data[:,1:], train_data[:,0:1]
x_test, y_test = test_data[:,1:], test_data[:,0:1]
y_train = y_train.ravel()
y_test = y_train.ravel()
print("x_train Shape", x_train.shape)
print("y_train Shape", y_train.shape)
print("x_test Shape", x_test.shape)
print("y_test Shape", y_test.shape)

"""make prediction data frame to merge the predicted sales prices of all trained algs"""

sales_dates = monthly_sale['ORDERDATE'][-12:].reset_index(drop=True)
predict_df = pd.DataFrame(sales_dates)

act_sales = monthly_sale['SALES'][-13:].to_list()
print(act_sales)

"""To create the leanear regreaaion model and also the predicted output"""

lr_model = LinearRegression()
lr_model.fit(x_train, y_train)
lr_pre = lr_model.predict(x_test)

"""create a test set metrix"""

lr_pre = lr_pre.reshape(-1,1)
#set metrix - contains the input features of the test data, and also predicted output
lr_pre_test_set = np.concatenate([lr_pre, x_test], axis=1)
lr_pre_test_set = scaler.inverse_transform(lr_pre_test_set)

"""calculate predicted sales values"""

result_list =[]
for index in range(0, len(lr_pre_test_set)):
  result_list.append(lr_pre_test_set[index][0] + act_sales[index])
lr_pre_series = pd.Series(result_list, name="Linear Prediction")
predict_df = predict_df.merge(lr_pre_series, left_index = True, right_index = True)

"""compare predicted sales and the actual sales"""

lr_mse = np.sqrt(mean_squared_error(predict_df['Linear Prediction'], monthly_sale['SALES'][-12:]))
lr_mae = mean_absolute_error(predict_df['Linear Prediction'], monthly_sale['SALES'][-12:])
lr_r2 = r2_score(predict_df['Linear Prediction'], monthly_sale['SALES'][-12:])

print("Linear Regrission MSE: ", lr_mse )
print("Linear Regrission MAE: ", lr_mse )
print("Linear Regrission r2: ", lr_r2 )
#print(predict_df)

"""visualisation of the prediction against actual sales"""

plt.figure(figsize=(15,5))
#actual sales
plt.plot(monthly_sale['ORDERDATE'], monthly_sale['SALES'])
#predicted sales
plt.plot(predict_df['ORDERDATE'], predict_df['Linear Prediction'])
plt.title("Cuustomer sales using R Model")
plt.xlabel("ORDERDATE")
plt.xlabel("SALES")
plt.legend(['Actual Sales', 'Predicted sales'])
plt.show()

"""Splitting the data for training (2013-2018) and creating a placeholder for 2019 predictions"""